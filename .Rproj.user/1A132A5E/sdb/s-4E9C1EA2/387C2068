{
    "contents" : "library(Rosmium)\nlibrary(methods)\nlibrary(rbenchmark)\nlibrary(bitops)\nlibrary(plyr)\nr <- new(Reader,\"/home/lukas/Downloads/switzerland-exact.osm.pbf\",EntityBits.nwr)\n\nw <- new(WriteHandler, \"/home/lukas/Arbeit/StreetMapData/test.osm.pbf\")\nw$registerObjectFilter(object_filter(v == \"Weinberglistrasse\"))\n\nr$apply_writer(w, TRUE)\n\n\nr_test <- new(Reader, \"/home/lukas/Arbeit/StreetMapData/test.osm.pbf\", EntityBits.nwr)\ndui <- osm_apply(r, object_includes = c(\"all\"), max_results = 1000,node_func = function(x) x, way_func = function(x) x, rel_func = function(x) x)\n\n\nlu_test <- new(Reader, \"/home/lukas/Arbeit/StreetMapData/LU.osm.pbf\", EntityBits.nwra)\n# home_filter <- object_filter(v == \"Weinberglistrasse\")\nhome_filter <- object_filter(t(\"admin_level\",\"8\") & t(\"name\",\"Luzern\"))\ndui <- osm_apply(lu_test, inc_geom = TRUE, node_func = function(x) x, way_func = function(x) x, rel_func = function(x) x, area_func = function(x) x, filter = home_filter)\n\ndui <- osm_apply(lu_test, max_results = 4, inc_geom = TRUE, area_func = function(x) x)\n\nlapply(dui, function(x){\n  wkb <- hex2raw(x$geom)\n  geom <- readWKB(wkb)\n  plot(geom, add=TRUE)\n})\n\ndui_full <- osm_apply(r, node_func = function(x) x, way_func = function(x) x, rel_func = function(x) x, filter = home_filter)\n\n# r <- new(Reader, \"/home/lukas/Downloads/test.osm\", EntityBits.nwr)\n# h <- new(CountHandler)\n# r$apply(h)\n\ntest_filter <- object_filter(k == \"addr:street\")\ntest_filter <- object_filter(v == \"Weinberglistrasse\")\n# test_filter <- tagfilter(t(\"boundary\",\"administrative\") & t(\"official_name:de\",\"Schweizerische Eidgenossenschaft\"))\n# test_filter <- tagfilter(haversineDistance(-118.734254, 34.0666735) < 0.00000000000000001)\n\ndui <- vector(mode = \"list\", length = 1000000)\nrh <- new(InternalRHandler,result_size = 1000000)\n# rh$registerFunction(function(x,i) {if(nrow(x$tags) > 1)print(x$tags)}; if(i %% 10000 == 0) {print(i); print(x)}}, EntityBits.node)\nrh$registerFunction(function(x,i) {print(x)}, EntityBits.nwr)\nrh$registerObjectFilter(test_filter)\n# rh$registerFunction(function(x,i) {if(i %% 100000 == 0) {print(i)};}, EntityBits.node)\n# rh$registerFunction(function(x,i) print(\"Hallo\"), EntityBits.way)\nr$applyR(rh, TRUE, \"sparsetable\")\n\n\n\n# osm_apply(r, max_results = 10000000, node_func = function(x) x, way_func = function(x) x, filter = test_filter)\n# \n# rh2 <- RHandler(max_results = 1000000)\n# rh2$registerFunction(function(x,i) {if(i %% 1000 == 0) {print(i$tags)}; .self$result[[i]] <- location(x)}, EntityBits.node)\n# r$applyR(rh2$handler)\n# \n# \n# SimpleHandler <- function(func, max_results) {\n#   result <- vector(mode = \"list\", length = max_results)\n#   rh <- new(InternalRHandler, result_size = max_results)\n#   # ret <- list(result = vector(mode = \"list\", length = max_results), handler = NULL)\n#   environment(func) <- environment()\n#   \n#   rh$registerFunction(func, EntityBits.node)\n#   # ret$handler <- rh\n#   # class(ret) <- \"SimpleHandler\"\n#   ret <- function(x) {\n#     rh\n#   }\n#   class(ret) <- c(\"SimpleHandler\", class(ret))\n#   ret\n# }\n# \n# blah <- SimpleHandler(function(x,i) {if(i %% 100000 == 0) {print(i)}; result[[i]] <<- location(x)}, 1000000)\n# r$applyR(blah())\n# dui <- get(\"result\", envir = environment(blah))\n# \n# \n# \n# \n# # rh <- new(RHandler, result_size = 1000000L, node_func = function(x, count) {\n# #   loc <- location(x)\n# # #   if(count %% 100000 == 0) {\n# # #     print(count)\n# # #   }\n# #   # cat(count - 1,\": \",loc$lon, \",\",loc$lat,\"\\n\")\n# #   loc\n# # })\n# # r$applyR(rh)\n# # system(\"speaker-test -t sine -f 1000 -l 1\")\n# # \n# # res <- rh$getNodeResults()\n# \n# \n# # TestHandler <- setRefClass(\"TestHandler\", inheritPackage = TRUE, contains = \"Rcpp_RHandler\")\n# # \n# # TestHandler$methods(initialize = function(nfunc) {\n# #   print(\"Hallo\")\n# #   environment(nfunc) <- .self\n# #   callSuper(nfunc)\n# # })\n# # \n# # \n# # th <- new(\"TestHandler\", nfunc = function(x) { longitude <<- x$location$lon; latitude <<- x$location$lat})\n# # r$applyR(th)\n# \n# \n# \n# # \n# # # TestHandler <- setRefClass(\"TestHandler\", fields = list(x = \"numeric\"), methods = list(node = function(y){x <<- x + 1}))\n# # # th <- new(\"TestHandler\", x=0)\n# # # r <- n\n# # \n# # \n# # # \n# # # nil <- lapply(1:5, th$dui)\n# # # th$x\n# # # thomas <- function(y){x <<- y}\n# # # TestHandler$methods(dui = thomas)\n# # # th <- new(\"TestHandler\", x=0)\n# # # nil <- lapply(1:5, th$dui)\n# # # th$x\n# # # \n",
    "created" : 1450640363353.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2717151663",
    "id" : "387C2068",
    "lastKnownWriteTime" : 1450540655,
    "path" : "~/Arbeit/TestRosmium.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "type" : "r_source"
}