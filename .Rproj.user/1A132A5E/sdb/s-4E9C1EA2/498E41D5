{
    "contents" : "\n// Rosmium: R bindings for the Osmium library\n// Copyright (C) 2015 Lukas Huwiler\n//\n// This file is part of Rosmium.\n//\n// Rosmium is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 2 of the License, or\n// (at your option) any later version.\n//\n// Rosmium is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Rosmium.  If not, see <http://www.gnu.org/licenses/>.\n\n#ifndef OSMOBJECTS_HPP\n#define OSMOBJECTS_HPP\n\n#include <Rcpp.h>\n#include <osmium/osm/object.hpp>\n#include <osmium/osm/node.hpp>\n#include <osmium/osm/way.hpp>\n#include <osmium/osm/relation.hpp>\n#include <osmium/osm/area.hpp>\n#include <osmium/geom/factory.hpp>\n#include <osmium/geom/wkb.hpp>\n\n//Rcpp::NumericVector getLocation(const Rcpp::XPtr<const osmium::Node>& node) {\n//  osmium::Location loc = node->location();\n//  // SEXP ret = Rcpp::NumericVector::create(Rcpp::Named(\"lon\") = loc.lon(), Rcpp::Named(\"lat\") = loc.lat());\n//  // return ret;\n//  return Rcpp::NumericVector::create(Rcpp::Named(\"lon\") = loc.lon(), Rcpp::Named(\"lat\") = loc.lat());\n//}\n\nclass RosmiumWrapper {\n  \npublic:\n\n  RosmiumWrapper(Rcpp::CharacterVector& obj_includes) {\n    for(auto object_include : obj_includes) {\n      if(object_include == \"id\" || object_include == \"all\") {\n        mIncludeId = true;\n      }\n      if(object_include == \"tags\" || object_include == \"all\") {\n        mIncludeTags = true;\n      }  \n      if(object_include == \"location\" || object_include == \"all\") {\n        mIncludeLocation = true;\n      } \n      if(object_include == \"geom\" || object_include == \"all\") {\n        mGeomFactory = std::make_shared<osmium::geom::WKBFactory<>>(osmium::geom::wkb_type::wkb, osmium::geom::out_type::hex); \n      }  \n      if(object_include == \"node_refs\" || object_include == \"all\") {\n        mIncludeNodeRefs = true;\n      }  \n      if(object_include == \"members\" || object_include == \"all\") {\n        mIncludeMembers = true;\n      }\n    }\n  } \n  \n  Rcpp::List createRNode(const osmium::Node& node) {\n    Rcpp::List ret(4);\n    \n    if(mIncludeId) {\n      ret[0] = getId(node);\n    }\n    if(mIncludeTags) {\n      ret[1] = getTags(node);\n    }\n    if(mIncludeLocation) {\n      ret[2] = getLocation(node); \n    }\n    if(mGeomFactory != nullptr) {\n      ret[3] = createWKB(node);\n    }\n    ret.attr(\"names\") = Rcpp::CharacterVector::create(\"id\",\"tags\",\"location\",\"geom\");\n    ret.attr(\"class\") = \"node\";\n    return ret;\n  }\n  \n  Rcpp::List createRWay(const osmium::Way& way) {\n    Rcpp::List ret(4);\n    if(mIncludeId) {\n      ret[0] = getId(way);\n    }\n    if(mIncludeTags) {\n      ret[1] = getTags(way);\n    }\n    if(mIncludeNodeRefs) {\n      ret[2] = getNodeRefs(way);\n    }\n    if(mGeomFactory != nullptr) {\n      ret[3] = createWKB(way);\n    }\n    ret.attr(\"names\") = Rcpp::CharacterVector::create(\"id\",\"tags\",\"node_refs\",\"geom\");\n    ret.attr(\"class\") = \"way\";\n    return ret;\n  } \n \n  Rcpp::List createRRelation(const osmium::Relation& rel) {\n    Rcpp::List ret(3);\n    \n    if(mIncludeId) {\n      ret[0] = getId(rel); \n    }\n    if(mIncludeTags) {\n      ret[1] = getTags(rel); \n    }\n    if(mIncludeMembers) {\n      ret[2] = getRelMembers(rel); \n    }\n    ret.attr(\"names\") = Rcpp::CharacterVector::create(\"id\",\"tags\",\"members\"); \n    ret.attr(\"class\") = \"relation\";\n    return ret;\n  } \n  \n  Rcpp::List createRArea(const osmium::Area& area) {\n    Rcpp::List ret = Rcpp::List::create(Rcpp::Named(\"id\") = getId(area), Rcpp::Named(\"tags\") = getTags(area),\n                                        Rcpp::Named(\"geom\") = createWKB(area));\n    ret.attr(\"class\") = \"area\";\n    return ret;   \n  }\n  \nprivate:\n  \n  std::shared_ptr<osmium::geom::WKBFactory<>> mGeomFactory = nullptr;\n  bool mIncludeId = false;\n  bool mIncludeTags = false;\n  bool mIncludeLocation = false;\n  bool mIncludeNodeRefs = false;\n  bool mIncludeMembers = false;\n\n  Rcpp::CharacterVector getId(const osmium::OSMObject& obj) {\n    return Rcpp::CharacterVector::create(std::to_string(obj.id()));\n  }\n  \n  Rcpp::CharacterMatrix getTags(const osmium::OSMObject& obj) {\n    const osmium::TagList& tags = obj.tags();\n    Rcpp::CharacterMatrix ret(tags.size(), 2);\n    colnames(ret) = Rcpp::CharacterVector::create(\"key\",\"value\");\n    int row = 0;\n    for(auto it = tags.cbegin(); it != tags.cend(); ++it) {\n      ret(row, 0) = Rcpp::String(it->key());\n      ret(row, 1) = Rcpp::String(it->value());\n      row++;\n    } \n    return ret;\n  } \n  \n  Rcpp::NumericMatrix getNodeRefs(const osmium::Way& way) {\n    Rcpp::NumericMatrix ret(way.nodes().size(), 2);\n    std::fill(ret.begin(), ret.end(), Rcpp::NumericVector::get_na());\n    int row = 0;\n    colnames(ret) = Rcpp::CharacterVector::create(\"lon\",\"lat\");\n    Rcpp::CharacterVector row_names = Rcpp::CharacterVector(ret.nrow());\n    for(const osmium::NodeRef& nr : way.nodes()) {\n      if(nr.location().valid()) {\n        ret(row, 0) = nr.lon(); \n        ret(row, 1) = nr.lat();\n      }\n      row_names[row] = std::to_string(nr.ref());\n      row++;\n    }  \n    rownames(ret) = row_names;\n    return ret;\n  }\n  \n  Rcpp::NumericVector getLocation(const osmium::Node& node) {\n    const osmium::Location& loc = node.location();\n    if(loc.valid()) {\n      return Rcpp::NumericVector::create(Rcpp::Named(\"lon\") = loc.lon_without_check(), Rcpp::Named(\"lat\") = loc.lat_without_check());\n    } else {\n      return Rcpp::NumericVector::create(Rcpp::Named(\"lon\") = NA_REAL, Rcpp::Named(\"lat\") = NA_REAL);\n    }\n  } \n  \n  Rcpp::CharacterMatrix getRelMembers(const osmium::Relation& rel) {\n    const osmium::RelationMemberList& members = rel.members(); \n    Rcpp::CharacterMatrix ret(members.size(), 2);\n    std::fill(ret.begin(), ret.end(), Rcpp::CharacterVector::get_na());\n    colnames(ret) = Rcpp::CharacterVector::create(\"entity_type\",\"role\");\n    Rcpp::CharacterVector row_names = Rcpp::CharacterVector(members.size());\n    int row = 0;\n    for(const osmium::RelationMember& rm : members) {\n      if(rm.type() == osmium::item_type::way) {\n        ret(row, 0) = \"way\";\n      } else if (rm.type() == osmium::item_type::node) {\n        ret(row, 0) = \"node\";\n      } else if (rm.type() == osmium::item_type::relation) {\n        ret(row, 0) = \"relation\";\n      }\n      ret(row, 1) = rm.role();\n      row_names[row] = std::to_string(rm.ref());\n      row++; \n    }\n    rownames(ret) = row_names;\n    return ret;\n  }\n  \n  Rcpp::CharacterVector createWKB(const osmium::Node& node) {\n    Rcpp::CharacterVector ret(1);\n    try {\n      ret[0] = mGeomFactory->create_point(node);\n      ret.attr(\"class\") = \"wkb\";\n      return ret; \n    } catch(std::exception& e) {\n      ret[0] = e.what();\n      ret.attr(\"class\") = \"invalid_geometry\";\n      return ret;\n    }\n  }\n  \n  Rcpp::CharacterVector createWKB(const osmium::Way& way) {\n//    if(way.is_closed()) {\n//      // return mGeomFactory->create_polygon(way);\n//    } else {\n    Rcpp::CharacterVector ret(1);\n    try {\n      ret[0] = mGeomFactory->create_linestring(way); \n      ret.attr(\"class\") = \"wkb\";\n      return ret; \n    } catch(std::exception& e) {\n      ret[0] = e.what();\n      ret.attr(\"class\") = \"invalid_geometry\";\n      return ret;\n    }\n//    }\n  }\n  \n  Rcpp::CharacterVector createWKB(const osmium::Area& area) {\n    Rcpp::CharacterVector ret(1);\n    try {\n      ret[0] = mGeomFactory->create_multipolygon(area);\n      ret.attr(\"class\") = \"wkb\"; \n      return ret; \n    } catch(std::exception& e) {\n      ret[0] = e.what();\n      ret.attr(\"class\") = \"invalid_geometry\";\n      return ret;\n    }\n  } \n  \n};\n\n#endif // OSMOBJECTS_HPP",
    "created" : 1460408141860.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1731343476",
    "id" : "498E41D5",
    "lastKnownWriteTime" : 1450538135,
    "path" : "~/Arbeit/Rosmium/src/OSMObjects.hpp",
    "project_path" : "src/OSMObjects.hpp",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "hpp"
}