{
    "contents" : "\\name{osm_apply}\n\\alias{osm_apply}\n\n\\title{\nApplying Callback Functions to OSM Objects\n}\n\n\\description{\nThis function allows to execute callback functions on OSM objects.\n}\n\n\\usage{\nosm_apply(reader, max_results = 1e+06, object_includes = \"all\", node_func = NULL, way_func = NULL, \n          rel_func = NULL, area_func = NULL, filter = NULL)\n}\n\n\\arguments{\n  \\item{reader}{\n    A reader object (see )\n  }\n  \\item{max_results}{\n    The maximum number of OSM objects passed to the callback function. This can be specified in order to prevent\n    memory exhaustion. Default value is 1'000'000.\n  }\n  \\item{object_includes}{\n    Specifies the attributes of OSM objects passed to the \\R side. Possible values are \\kbd{\"all\"},\\kbd{\"id\"},\\kbd{\"tags\"},\\kbd{\"location\"},\\kbd{\"geom\"},\\kbd{\"node_refs\"},\\kbd{\"members\"}.\n  }\n  \\item{node_func}{\n    A callback function which is called on every node object (provided that the object satisfies the filter condition).\n    The return value of the function is added to the result list. If no function is specified (default), all nodes\n    are ignored.\n  }\n  \\item{way_func}{\n    A callback function which is called on every way object (provided that the object satisfies the filter condition).\n    The return value of the function is added to the result list. If no function is specified (default), all ways\n    are ignored.\n  }\n  \\item{rel_func}{\n    A callback function which is called on every relation object (provided that the object satisfies the filter condition).\n    The return value of the function is added to the result list. If no function is specified (default), all relations\n    are ignored.\n  }\n  \\item{area_func}{\n    A callback function which is called on every area object (provided that the object satisfies the filter condition).\n    The return value of the function is added to the result list. If no function is specified (default), all areas\n    are ignored. Areas are a helpful expansion of the osmium library and are not native OSM objects. \n  }\n  \\item{filter}{\n    A filter object in order to filter out the relevant objects (see \\code{\\link[Rosmium]{object_filter}}).\n  }\n}\n\\details{\n\n}\n\n\\value{\nA list containing the results of all function calls.\n}\n\n\\references{\n}\n\n\\author{\nLukas Huwiler \\email{lukas.huwiler@gmx.ch}\n}\n\n\\seealso{\n\n}\n\n\\examples{\n\\dontrun{\n# Extract the city border of Bern and plot the city area\nif(require(sp) && require(wkb)) {\n  example_file <- system.file(\"osm_example/bern_switzerland.osm.pbf\", package = \"Rosmium\")\n  reader <- new(Reader, example_file, EntityBits.area)\n  \n  # Filter for border extraction\n  border <- object_filter(t(\"admin_level\",\"8\") & t(\"name\",\"Bern\"))\n  # Area callback: converts area to sp object\n  getSpatialObject <- function(x) {\n      wkb <- hex2raw(x$geom)\n      readWKB(wkb)\n  }\n  \n  # Get spatial object\n  city_boundary <- osm_apply(reader, area_func = getSpatialObject, filter = border)\n  \n  # Plot the city area\n  plot(city_boundary[[1]], density = -1, col = \"goldenrod3\", border = \"black\")\n  \n} else {\n  stop(\"You need the packages wkb and sp in order to run this example\") \n}\n}\n}\n",
    "created" : 1460408200211.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3636876222",
    "id" : "883FBEE8",
    "lastKnownWriteTime" : 1460409590,
    "path" : "~/Arbeit/Rosmium/man/osm_apply.Rd",
    "project_path" : "man/osm_apply.Rd",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_doc"
}