{
    "contents" : "\n## Rosmium: R bindings for the Osmium library\n## Copyright (C) 2015,2016 Lukas Huwiler\n## \n## This file is part of Rosmium.\n## \n## Rosmium is free software: you can redistribute it and/or modify it\n## under the terms of the GNU General Public License as published by\n## the Free Software Foundation, either version 2 of the License, or\n## (at your option) any later version.\n## \n## Rosmium is distributed in the hope that it will be useful, but\n## WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n## GNU General Public License for more details.\n## \n## You should have received a copy of the GNU General Public License\n## along with Rosmium.  If not, see <http://www.gnu.org/licenses/>.\n\nobject_filter <- function(expr, is_char = FALSE) {\n  if(!is_char) {\n    expr <- deparse(substitute(expr))\n    expr <- paste(expr, collapse = \"\")\n  }\n  print(expr)\n  new(ObjectFilter, expr)\n}\n\nosm_apply <- function(reader, max_results = 1000000, object_includes = \"all\", node_func = NULL, way_func = NULL, rel_func = NULL, area_func = NULL, filter = NULL) {\n  object_includes <- match.arg(object_includes, choices = c(\"all\",\"id\",\"tags\",\"location\",\"geom\",\"node_refs\",\"members\"), TRUE)\n  handler <- new(InternalRHandler, object_includes, result_size = max_results)\n  result <- vector(mode = \"list\", length = max_results)\n  last_res <- 0\n   if(!is.null(node_func)) {\n     handler$registerFunction(function(x,i) {\n       last_res <<- i\n       result[[i]] <<- node_func(x)\n       }, EntityBits.node)\n   }\n  if(!is.null(way_func)) {\n    handler$registerFunction(function(x,i) {\n      last_res <<- i\n      result[[i]] <<- way_func(x)\n      }, EntityBits.way)\n    \n  }\n  if(!is.null(rel_func)) {\n    handler$registerFunction(function(x,i) {\n      last_res <<- i\n      result[[i]] <<- rel_func(x)\n      }, EntityBits.relation) \n  }\n  if(!is.null(area_func)) {\n    handler$registerFunction(function(x,i) {\n      last_res <<- i\n      result[[i]] <<- area_func(x)\n      }, EntityBits.area)\n  }\n  if(!is.null(filter)) {\n    handler$registerObjectFilter(filter)\n  }\n  reader$applyR(handler, TRUE, \"blah\")\n  if(last_res > 0) {\n    return(result[1:last_res])\n  }\n}\n\n#.registerFunction <- function(handler, entity, func = NULL) {\n#  if(!is.null(func)) {\n#    wrap_func <- function(x, i) {\n#      last_res <<- i\n#      result[[i]] <<- func(x)\n#    }\n#    # environment(wrap_func) <- parent.frame()\n#    handler$registerFunction(wrap_func, entity)\n#  }\n#}\n\n# dui <- createRHandler()\n# \n# \n# setRefClass(\"Rcpp_InternalRHandler\")\n# \n\n#setOldClass(c(\"Rcpp_InternalRHandler\"))\n#\n## setOldClass(\"Rcpp_InternalRHandler\", where = \"package:Rosmium\")\n#RHandler <- setRefClass(\"RHandler\",\n#                              fields = list(result = \"list\",\n#                                            max_results = \"numeric\",\n#                                            handler = \"envRefClass\"),\n#                              methods = list(\n#                                initialize = function(max_results) {\n#                                  .self$max_results <- max_results\n#                                  if(!is.na(max_results)) {\n#                                    print(\"blah\")\n#                                    .self$result <- vector(mode = \"list\", length = max_results) \n#                                  } else {\n#                                    .self$result <- list()\n#                                  }\n#                                  .self$handler <- new(InternalRHandler, max_results = max_results)\n#                                },\n#                                registerFunction = function(func, entity_types) {\n##                                   wrap_fun <- function(x, i) {\n##                                     print(i)\n##                                     .self$result[[i]] <- func(x)\n##                                     # names(result)[i] <<- paste0(names(entity_types), id(x))\n##                                   }\n#                                  environment(func) <- environment()\n#                                  # callSuper(wrap_fun, entity_types)\n#                                  .self$handler$registerFunction(func, entity_types)\n#                                }\n#                              )\n#)\n\n#setMethod(\"apply\",c(X = \"RHandler\", MARGIN = \"missing\", FUN = \"Reader\"),\n#          function(X, MARGIN, FUN, reader, ...) {\n#            reader$applyR(handler$handler)\n#          }\n#)\n# setMethod(\"registerFunction\", function(func, entity_types) {\n#   environment(func) \n#   wrap_func <- function(x, i) {\n#     \n#   } \n# })\n#\n# RHandler$methods(\n#   registerFunction = function(func, entity_types) {\n#     wrap_fun <- function(x, i) {\n#       # .seld$result[[i]] <<- func(x)\n#       # names(result)[i] <<- paste0(names(entity_types), id(x))\n#     }\n#     # callSuper(wrap_fun, entity_types)\n#   }\n# )\n#\n\n#setMethod(\"initialize\", \"Rcpp_Tag\", function(.Object, ...) stop(\"No public constructor for class Tag\"))\n#setMethod(\"initialize\", \"Rcpp_OSMObject\", function(.Object, ...) stop(\"No public constructor for class OSMObject\"))\n#setMethod(\"initialize\", \"Rcpp_Node\", function(.Object, ...) stop(\"No public constructor for class Node\"))\n\n# setMethod(\"[\", c(x = \"Rcpp_HandlerResult\", i = \"numeric\", j = \"missing\"),\n#           function(x, i, j, ..., drop = TRUE) {\n#             x$get(i)\n#           })\n\n# setMethod(\"initialize\", \"Rcpp_InternalRHandler\", function(.Object, ...) stop(\"Blah\"))\n\n#createRHandler <- function(max_size = 1000000) {\n#  new(RHandler, result_size = max_size) \n#}\n\n\n",
    "created" : 1460406653915.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2002473959",
    "id" : "B611D990",
    "lastKnownWriteTime" : 1460408497,
    "path" : "~/Arbeit/Rosmium/R/Source.R",
    "project_path" : "R/Source.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}